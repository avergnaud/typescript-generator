/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';


export interface IUser {
    id?: number;
    username?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    password?: string;
    phone?: string;
    userStatus?: number;
}


export class User extends BaseModel implements IUser {
    id: number;
    username: string;
    firstName: string;
    lastName: string;
    email: string;
    password: string;
    phone: string;
    /** User Status */
    userStatus: number;

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this.id = values.id;
            this.username = values.username;
            this.firstName = values.firstName;
            this.lastName = values.lastName;
            this.email = values.email;
            this.password = values.password;
            this.phone = values.phone;
            this.userStatus = values.userStatus;
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                id: new FormControl(this.id),
                username: new FormControl(this.username),
                firstName: new FormControl(this.firstName),
                lastName: new FormControl(this.lastName),
                email: new FormControl(this.email),
                password: new FormControl(this.password),
                phone: new FormControl(this.phone),
                userStatus: new FormControl(this.userStatus),
            });
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['id'].setValue(this.id);
            this._formGroup.controls['username'].setValue(this.username);
            this._formGroup.controls['firstName'].setValue(this.firstName);
            this._formGroup.controls['lastName'].setValue(this.lastName);
            this._formGroup.controls['email'].setValue(this.email);
            this._formGroup.controls['password'].setValue(this.password);
            this._formGroup.controls['phone'].setValue(this.phone);
            this._formGroup.controls['userStatus'].setValue(this.userStatus);
        }
    }
}

