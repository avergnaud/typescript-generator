/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';

import { Category } from './category.model';
import { Tag } from './tag.model';
import { status } from './enums';

export interface IPet {
    id?: number;
    category?: Category;
    name: string;
    photoUrls: Array<string>;
    tags?: Array<Tag>;
    status?: status;
}


export class Pet extends BaseModel implements IPet {
    id: number;
    category: Category;
    name: string;
    photoUrls: Array<string>;
    tags: Array<Tag>;
    /** pet status in the store */
    status: status;

    /**
     * constructor
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    constructor(values?: any) {
        super();
        this.category = new Category();
        this.photoUrls = new Array<string>();
        this.tags = new Array<Tag>();
        if (values) {
            this.setValues(values);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any): void {
        if (values) {
            this.id = values.id;
            this.category.setValues(values.category);
            this.name = values.name;
            this.fillModelArray<string>(this, 'photoUrls', values.photoUrls);
            this.fillModelArray<Tag>(this, 'tags', values.tags, Tag);
            this.status = values.status;
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                id: new FormControl(this.id),
                category: this.category.$formGroup,
                name: new FormControl(this.name, [Validators.required, ]),
                photoUrls: new FormArray([]),
                tags: new FormArray([]),
                status: new FormControl(this.status, [enumValidator(status), ]),
            });
            // generate FormArray control elements
            this.fillFormArray<string>('photoUrls', this.photoUrls);
            // generate FormArray control elements
            this.fillFormArray<Tag>('tags', this.tags, Tag);
        }
        return this._formGroup;
    }

    setFormGroupValues() {
        if (this._formGroup) {
            this._formGroup.controls['id'].setValue(this.id);
            this.category.setFormGroupValues();
            this._formGroup.controls['name'].setValue(this.name);
            this.fillModelArray<string>(this, 'photoUrls', this.photoUrls);
            this.fillModelArray<Tag>(this, 'tags', this.tags, Tag);
            this._formGroup.controls['status'].setValue(this.status);
        }
    }
}

